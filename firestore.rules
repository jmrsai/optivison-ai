/**
 * @fileoverview Firestore Security Rules for the Eye Clinic application.
 *
 * Core Philosophy:
 * This ruleset enforces a clinician-ownership model. Each patient and scan is associated with a specific clinician.
 * Only the assigned clinician can create, read, update, or delete patient or scan data. This ensures data privacy and
 * prevents unauthorized access.
 *
 * Data Structure:
 * - /patients/{patientId}: Stores patient records, with each document containing a `clinicianId` field.
 * - /scans/{scanId}: Stores scan records, with each document containing both `patientId` and `clinicianId` fields.
 *
 * Key Security Decisions:
 * - Clinicians can only access patients and scans associated with their `clinicianId`.
 * - Data shape validation is relaxed for prototyping purposes, focusing on authorization.
 * - No listing of all patients or scans is allowed without authentication.
 *
 * Denormalization for Authorization:
 * - Both `patients` and `scans` collections include `clinicianId` to enable direct authorization checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to patient records. Only the assigned clinician can manage patient data.
     * @path /patients/{patientId}
     * @allow (create) - A clinician creates a new patient record, where the clinicianId in the new document matches their own UID.
     * @allow (get) - A clinician retrieves a specific patient record, where the clinicianId in the existing document matches their own UID.
     * @allow (update) - A clinician updates a patient record, where the clinicianId in the existing document matches their own UID.
     * @allow (delete) - A clinician deletes a patient record, where the clinicianId in the existing document matches their own UID.
     * @deny (create) - A non-clinician attempts to create a patient record.
     * @deny (get) - A clinician attempts to retrieve a patient record that is not assigned to them.
     * @principle Enforces clinician-ownership for patient data.
     */
    match /patients/{patientId} {
      // Helper function to check if the request is made by the assigned clinician
      function isClinicianOwner(clinicianId) {
        return isSignedIn() && request.auth.uid == clinicianId;
      }

      // Helper function to check if the document exists and the request is made by the assigned clinician
      function isExistingClinicianOwner(clinicianId) {
        return isClinicianOwner(clinicianId) && resource != null;
      }

      // Read permissions: Only the assigned clinician can read patient data
      allow get: if isExistingClinicianOwner(resource.data.clinicianId);
      allow list: if false;

      // Write permissions: Only the assigned clinician can create, update, or delete patient data
      allow create: if isSignedIn() && request.resource.data.clinicianId == request.auth.uid;
      allow update: if isExistingClinicianOwner(resource.data.clinicianId) && request.resource.data.clinicianId == resource.data.clinicianId;
      allow delete: if isExistingClinicianOwner(resource.data.clinicianId);
    }

    /**
     * @description Controls access to scan records. Only the assigned clinician can manage scan data.
     * @path /scans/{scanId}
     * @allow (create) - A clinician creates a new scan record, where the clinicianId in the new document matches their own UID.
     * @allow (get) - A clinician retrieves a specific scan record, where the clinicianId in the existing document matches their own UID.
     * @allow (update) - A clinician updates a scan record, where the clinicianId in the existing document matches their own UID.
     * @allow (delete) - A clinician deletes a scan record, where the clinicianId in the existing document matches their own UID.
     * @deny (create) - A non-clinician attempts to create a scan record.
     * @deny (get) - A clinician attempts to retrieve a scan record that is not assigned to them.
     * @principle Enforces clinician-ownership for scan data.
     */
    match /scans/{scanId} {
      // Read permissions: Only the assigned clinician can read scan data
      allow get: if isExistingClinicianOwner(resource.data.clinicianId);
      allow list: if false;

      // Write permissions: Only the assigned clinician can create, update, or delete scan data
      allow create: if isSignedIn() && request.resource.data.clinicianId == request.auth.uid;
      allow update: if isExistingClinicianOwner(resource.data.clinicianId) && request.resource.data.clinicianId == resource.data.clinicianId;
      allow delete: if isExistingClinicianOwner(resource.data.clinicianId);
    }

    // Define a global function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Define a global function to check if the request is made by the assigned clinician
    function isClinicianOwner(clinicianId) {
        return isSignedIn() && request.auth.uid == clinicianId;
    }

    // Define a global function to check if the document exists and the request is made by the assigned clinician
    function isExistingClinicianOwner(clinicianId) {
        return isClinicianOwner(clinicianId) && resource != null;
    }
  }
}