/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a role-based access control model with ownership constraints.
 * Users can only read and write their own profile data. Clinicians can access and manage patient data.
 * Scans are accessible by clinicians who performed them, and messages are accessible to the sender and receiver.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with the userId matching the Firebase auth UID.
 * - /patients/{patientId}: Stores patient records, with access controlled by the clinicianId field.
 * - /scans/{scanId}: Stores scan records, with access controlled by both patientId and clinicianId.
 * - /messages/{messageId}: Stores messages, with access controlled by senderId and receiverId.
 *
 * Key Security Decisions:
 * - Users can only read their own profile. User listing is disallowed.
 * - Patients are associated with clinicians via the clinicianId field.
 * - Scans are associated with patients and clinicians via patientId and clinicianId.
 * - Messages are accessible to both sender and receiver.
 *
 * Denormalization for Authorization:
 * - Patient documents include the clinicianId to simplify access control.
 * - Scan documents include both patientId and clinicianId for access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User can access and modify their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (list) User cannot list all users.
     * @principle Enforces document ownership and prevents unauthorized access to user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages patient records, accessible by assigned clinicians.
     * @path /patients/{patientId}
     * @allow (create) Clinician can create a new patient record.
     * @allow (get, list) Clinician can access a list of patients assigned to them.
     * @allow (update, delete) Clinician can update or delete patient records assigned to them.
     * @deny (create) Non-clinicians cannot create patients.
     * @deny (get, list, update, delete) Unauthorized users cannot access patient data.
     * @principle Restricts patient data access to assigned clinicians.
     */
    match /patients/{patientId} {
       function isSignedIn() {
          return request.auth != null;
       }

       function isClinician() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'clinician';
       }

       function isAssignedClinician(clinicianId) {
         return isSignedIn() && isClinician() && request.auth.uid == clinicianId;
       }

       function isExistingAssignedClinician(clinicianId) {
           return isAssignedClinician(clinicianId) && resource != null;
       }

      allow get: if isSignedIn() && isClinician() && resource.data.clinicianId == request.auth.uid;
      allow list: if isSignedIn() && isClinician();
      allow create: if isSignedIn() && isClinician() && request.resource.data.clinicianId == request.auth.uid;
      allow update: if isExistingAssignedClinician(resource.data.clinicianId);
      allow delete: if isExistingAssignedClinician(resource.data.clinicianId);
    }

    /**
     * @description Manages scan records, accessible by the associated clinician.
     * @path /scans/{scanId}
     * @allow (create) Clinician can create a new scan record.
     * @allow (get, list) Clinician can access scans they performed.
     * @allow (update, delete) Clinician can update or delete scans they performed.
     * @deny (create) Non-clinicians cannot create scans.
     * @deny (get, list, update, delete) Unauthorized users cannot access scan data.
     * @principle Restricts scan data access to the performing clinician.
     */
    match /scans/{scanId} {
        function isSignedIn() {
          return request.auth != null;
       }

       function isClinician() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'clinician';
       }

      function isPerformingClinician(clinicianId) {
          return isSignedIn() && isClinician() && request.auth.uid == clinicianId;
      }

      function isExistingPerformingClinician(clinicianId) {
          return isPerformingClinician(clinicianId) && resource != null;
      }

      allow get: if isSignedIn() && isClinician() && resource.data.clinicianId == request.auth.uid;
      allow list: if isSignedIn() && isClinician();
      allow create: if isSignedIn() && isClinician() && request.resource.data.clinicianId == request.auth.uid;
      allow update: if isExistingPerformingClinician(resource.data.clinicianId);
      allow delete: if isExistingPerformingClinician(resource.data.clinicianId);
    }

    /**
     * @description Manages chat messages between users.
     * @path /messages/{messageId}
     * @allow (create) Authenticated user can create a message.
     * @allow (get) Sender and Receiver can access the message.
     * @allow (list) No listing of messages.
     * @allow (update, delete) No updates or deletes of messages.
     * @deny Non-authenticated users cannot create messages.
     * @deny Unauthorized users cannot access message data.
     * @principle Restricts message data access to sender and receiver.
     */
    match /messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isSenderOrReceiver(senderId, receiverId) {
        return isSignedIn() && (request.auth.uid == senderId || request.auth.uid == receiverId);
      }
      allow get: if isSenderOrReceiver(resource.data.senderId, resource.data.receiverId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}