/**
 * @fileoverview Firestore Security Rules for the Clinic App.
 *
 * Core Philosophy:
 * This ruleset enforces a clinician-ownership model for patient records and scans.
 * Only the assigned clinician can create, read, update, or delete patient or scan data.
 *
 * Data Structure:
 * - /patients/{patientId}: Stores patient information, including the assigned clinician's ID (clinicianId).
 * - /scans/{scanId}: Stores scan data, including both the patient's ID (patientId) and the clinician's ID (clinicianId).
 *
 * Key Security Decisions:
 * - Patients cannot access their own records or scans directly through Firestore. All access must be mediated by a clinician.
 * - Listing all patients or scans is disallowed to prevent unauthorized data access.
 * - The 'clinicianId' field is critical for authorization and must match the authenticated user's UID for write operations.
 *
 * Denormalization for Authorization:
 * - Both the 'patients' and 'scans' documents include the 'clinicianId' to allow direct rule-based authorization without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to patient records.
     * @path /patients/{patientId}
     * @allow (create) - A clinician can create a patient record if their ID matches the patient's clinicianId.
     * @allow (get) - A clinician can read a patient record if their ID matches the patient's clinicianId.
     * @allow (update) - A clinician can update a patient record if their ID matches the patient's clinicianId.
     * @allow (delete) - A clinician can delete a patient record if their ID matches the patient's clinicianId.
     * @deny (create) - A clinician cannot create a patient record if their ID does not match the patient's clinicianId.
     * @deny (get) - A user who is not the assigned clinician cannot read the patient record.
     * @deny (update) - A user who is not the assigned clinician cannot update the patient record.
     * @deny (delete) - A user who is not the assigned clinician cannot delete the patient record.
     * @principle Enforces clinician-ownership for patient records.
     */
    match /patients/{patientId} {
      // Helper function to check if the authenticated user is the assigned clinician
      function isClinicianOwner(clinicianId) {
        return isSignedIn() && request.auth.uid == clinicianId;
      }

      // Helper function to check if the authenticated user is the assigned clinician and the document exists.
      function isExistingClinicianOwner(clinicianId) {
        return isClinicianOwner(clinicianId) && resource != null;
      }

      // Allow reads (get) by the assigned clinician.
      allow get: if isClinicianOwner(resource.data.clinicianId);

      // Prevent listing of all patient documents.
      allow list: if false;

      // Allow creation only if the 'clinicianId' matches the authenticated user's ID.
      allow create: if isClinicianOwner(request.resource.data.clinicianId);

      // Allow updates only if the 'clinicianId' matches the authenticated user's ID and the document exists. Also, ensure the 'clinicianId' cannot be changed.
      allow update: if isExistingClinicianOwner(resource.data.clinicianId)
                    && request.resource.data.clinicianId == resource.data.clinicianId; // Enforce immutability of clinicianId

      // Allow deletion only if the 'clinicianId' matches the authenticated user's ID and the document exists.
      allow delete: if isExistingClinicianOwner(resource.data.clinicianId);
    }

    /**
     * @description Controls access to scan records.
     * @path /scans/{scanId}
     * @allow (create) - A clinician can create a scan record if their ID matches the scan's clinicianId.
     * @allow (get) - A clinician can read a scan record if their ID matches the scan's clinicianId.
     * @allow (update) - A clinician can update a scan record if their ID matches the scan's clinicianId.
     * @allow (delete) - A clinician can delete a scan record if their ID matches the scan's clinicianId.
     * @deny (create) - A clinician cannot create a scan record if their ID does not match the scan's clinicianId.
     * @deny (get) - A user who is not the assigned clinician cannot read the scan record.
     * @deny (update) - A user who is not the assigned clinician cannot update the scan record.
     * @deny (delete) - A user who is not the assigned clinician cannot delete the scan record.
     * @principle Enforces clinician-ownership for scan records.
     */
    match /scans/{scanId} {
      // Helper function to check if the authenticated user is the assigned clinician
      function isClinicianOwner(clinicianId) {
        return isSignedIn() && request.auth.uid == clinicianId;
      }

      // Helper function to check if the authenticated user is the assigned clinician and the document exists.
      function isExistingClinicianOwner(clinicianId) {
        return isClinicianOwner(clinicianId) && resource != null;
      }

      // Allow reads (get) by the assigned clinician.
      allow get: if isClinicianOwner(resource.data.clinicianId);

      // Prevent listing of all scan documents.
      allow list: if false;

      // Allow creation only if the 'clinicianId' matches the authenticated user's ID.
      allow create: if isClinicianOwner(request.resource.data.clinicianId);

      // Allow updates only if the 'clinicianId' matches the authenticated user's ID and the document exists. Also, ensure the 'clinicianId' cannot be changed.
      allow update: if isExistingClinicianOwner(resource.data.clinicianId)
                    && request.resource.data.clinicianId == resource.data.clinicianId; // Enforce immutability of clinicianId

      // Allow deletion only if the 'clinicianId' matches the authenticated user's ID and the document exists.
      allow delete: if isExistingClinicianOwner(resource.data.clinicianId);
    }

    // Generic function to check if a user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }
  }
}