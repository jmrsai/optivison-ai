/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model,
 *              allowing users to only access their own profile data, clinicians to access patient data, and
 *              restricting access to scans and messages based on user roles and relationships.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, with 'clinician' and 'patient' roles.
 * - /patients/{patientId}: Stores patient data, linked to a 'clinicianId'.
 * - /scans/{scanId}: Stores scan data, linked to 'patientId' and 'clinicianId'.
 * - /messages/{messageId}: Stores messages between users, identified by 'senderId' and 'receiverId'.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Clinicians can create, read, update, and delete patient data where they are the assigned clinician.
 * - Scans are accessible only to the associated clinician and patient.
 * - Messages can be accessed only by the sender and receiver.
 * - Listing of users and patients is generally disallowed for privacy.
 * - Role validation is performed on user creation.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is the clinician assigned to the patient.
     */
    function isClinicianForPatient(clinicianId) {
      return request.auth.uid == clinicianId;
    }
    /**
     * @description User profile access control.
     * @path /users/{userId}
     * @allow (get) Authenticated user reading their own profile.
     * @allow (create) Authenticated user creating their own profile.
     * @allow (update) Authenticated user updating their own profile.
     * @deny (get) Authenticated user reading another user's profile.
     * @deny (create) Unauthenticated user creating a profile.
     * @deny (update) Authenticated user updating another user's profile.
     * @deny (delete) Any user deleting a profile.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if false;
    }

    /**
     * @description Patient data access control.
     * @path /patients/{patientId}
     * @allow (create) Clinician creating a patient record with their ID as clinicianId.
     * @allow (get) Clinician reading a patient record where they are the assigned clinician.
     * @allow (update) Clinician updating a patient record where they are the assigned clinician.
     * @allow (delete) Clinician deleting a patient record where they are the assigned clinician.
     * @deny (create) Patient creating a patient record.
     * @deny (get) Patient reading a patient record.
     * @deny (update) Patient updating a patient record.
     * @deny (delete) Patient deleting a patient record.
     * @principle Enforces clinician-patient relationship for data access.
     */
    match /patients/{patientId} {
      allow get: if isSignedIn() && isClinicianForPatient(resource.data.clinicianId);
      allow list: if false;
      allow create: if isSignedIn() && isClinicianForPatient(request.resource.data.clinicianId);
      allow update: if isSignedIn() && isClinicianForPatient(resource.data.clinicianId) && resource != null;
      allow delete: if isSignedIn() && isClinicianForPatient(resource.data.clinicianId) && resource != null;
    }

    /**
     * @description Scan data access control.
     * @path /scans/{scanId}
     * @allow (get) Clinician or patient reading a scan record where they are the associated user.
     * @allow (create) Clinician creating a scan record for their patient.
     * @allow (update) Clinician updating a scan record for their patient.
     * @allow (delete) Clinician deleting a scan record for their patient.
     * @deny (create) Patient creating a scan record.
     * @deny (update) Patient updating a scan record.
     * @deny (delete) Patient deleting a scan record.
     * @principle Enforces clinician-patient relationship for scan data access.
     */
    match /scans/{scanId} {
      allow get: if isSignedIn() && (isClinicianForPatient(resource.data.clinicianId) || isOwner(resource.data.patientId));
      allow list: if false;
      allow create: if isSignedIn() && isClinicianForPatient(request.resource.data.clinicianId) && request.resource.data.patientId != null;
      allow update: if isSignedIn() && isClinicianForPatient(resource.data.clinicianId) && resource != null;
      allow delete: if isSignedIn() && isClinicianForPatient(resource.data.clinicianId) && resource != null;
    }

    /**
     * @description Message data access control.
     * @path /messages/{messageId}
     * @allow (get) Sender or receiver reading a message.
     * @allow (create) Sender creating a message.
     * @allow (update) No one updating a message.
     * @allow (delete) Sender deleting a message.
     * @deny (get) Other users reading a message.
     * @deny (create) Other users creating a message.
     * @deny (update) Any user updating a message.
     * @deny (delete) Other users deleting a message.
     * @principle Enforces sender-receiver relationship for message data access.
     */
    match /messages/{messageId} {
      allow get: if isSignedIn() && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.senderId;
      allow update: if false;
      allow delete: if isSignedIn() && request.auth.uid == resource.data.senderId && resource != null;
    }
  }
}