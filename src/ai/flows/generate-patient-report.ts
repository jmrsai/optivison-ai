'use server';

/**
 * @fileOverview A patient report generation AI agent.
 *
 * - generatePatientReport - A function that handles the patient report generation process.
 * - GeneratePatientReportInput - The input type for the generatePatientReport function.
 * - GeneratePatientReportOutput - The return type for the generatePatientReport function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';
import type { AnalyzeEyeScanOutput } from '@/ai/flows/ai-driven-diagnostics';


const GeneratePatientReportInputSchema = z.object({
  patientName: z.string().describe("The patient's full name."),
  patientAge: z.number().describe("The patient's age."),
  patientGender: z.string().describe("The patient's gender."),
  scanDate: z.string().describe("The date of the scan."),
  clinicalNotes: z.string().optional().describe('The clinical notes for the scan.'),
  analysis: z.any().describe("The full AI analysis object from the 'analyzeEyeScan' flow."),
  patientHistory: z.string().describe('The patient history for longitudinal analysis.'),
});

export type GeneratePatientReportInput = z.infer<typeof GeneratePatientReportInputSchema> & { analysis: AnalyzeEyeScanOutput };


const GeneratePatientReportOutputSchema = z.object({
  report: z.string().describe('The comprehensive patient report in a structured, professional format, using markdown for section headers.'),
});
export type GeneratePatientReportOutput = z.infer<typeof GeneratePatientReportOutputSchema>;

export async function generatePatientReport(input: GeneratePatientReportInput): Promise<GeneratePatientReportOutput> {
  return generatePatientReportFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generatePatientReportPrompt',
  input: {schema: GeneratePatientReportInputSchema},
  output: {schema: GeneratePatientReportOutputSchema},
  prompt: `You are an expert medical scribe specializing in ophthalmology. Your task is to generate a comprehensive, professional, A-to-Z patient report suitable for medical records.

Use all the provided information to create a structured report. The output must be plain text, using markdown-like headers for sections (e.g., "**SECTION TITLE**"). Ensure every section is filled with accurate and detailed information derived from the analysis.

**Patient Information:**
- Name: {{{patientName}}}
- Age: {{{patientAge}}}
- Gender: {{{patientGender}}}

**Scan Details:**
- Date of Scan: {{{scanDate}}}
- Clinical Notes: {{{clinicalNotes}}}

**Patient Medical History:**
{{{patientHistory}}}

---
**COMPREHENSIVE AI-POWERED OPHTHALMIC ANALYSIS**
---

**1. DIAGNOSTIC INSIGHTS:**
   - AI Summary: {{{analysis.diagnosticInsights}}}
   - Confidence Score: {{{analysis.confidenceLevel}}}

**2. FINDINGS:**
   - Identified Abnormalities:
{{#each analysis.potentialAbnormalities}}
     - {{{this}}}
{{/each}}
{{#unless analysis.potentialAbnormalities}}
     - None identified.
{{/unless}}
   - Detected Early Signs of Disease:
{{#each analysis.earlySigns}}
     - {{{this}}}
{{/each}}
{{#unless analysis.earlySigns}}
    - None identified.
{{/unless}}
   - Disease Staging: {{{analysis.diseaseStaging}}}

**3. RISK & PROGNOSIS:**
   - Risk Assessment: {{{analysis.riskAssessment}}}
   - Current Risk Level: {{{analysis.riskLevel}}}

**4. PROPOSED TREATMENT & MANAGEMENT:**
   - Suggested Treatments:
{{#each analysis.treatmentSuggestions}}
     - {{{this}}}
{{/each}}
{{#unless analysis.treatmentSuggestions}}
    - None suggested.
{{/unless}}
   - Prevention Suggestions:
{{#each analysis.preventionSuggestions}}
     - {{{this}}}
{{/each}}
{{#unless analysis.preventionSuggestions}}
    - None suggested.
{{/unless}}

**5. RECOMMENDATIONS & NEXT STEPS:**
   - Follow-Up Plan: {{{analysis.followUpPlan}}}
   - Further Recommendations: {{{analysis.recommendations}}}

**Disclaimer:** This report is generated by an AI assistant and should be verified by a qualified medical professional.
`,
});

const generatePatientReportFlow = ai.defineFlow(
  {
    name: 'generatePatientReportFlow',
    inputSchema: GeneratePatientReportInputSchema,
    outputSchema: GeneratePatientReportOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
